/*
 * GumBallMachine.h
 *
 *  Created on: Nov 8, 2014
 *      Author: Nikhil
 */

#ifndef GUMBALLMACHINE_H_
#define GUMBALLMACHINE_H_

#include "GumBallState.h"
#include<iostream>
using namespace std;

class GumBallMachine;

class NoQuarter: public GumBallState {
public:
	NoQuarter(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~NoQuarter(){}

	virtual void insertCoin()
	{
		cout<<"Entered a coin"<<endl;
		gumballObj->setState( gumballObj->getQuarterState() );
	}
	virtual void ejectCoin()
	{
		cout<<"No Coin"<<endl;
	}
	virtual void turnCrank()
	{
		cout<<"Enter Coin"<<endl;
	}

private:
	GumBallMachine* gumballObj;
};

class HasQuarter: public GumBallState {
public:
	HasQuarter(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~HasQuarter(){}

	virtual void insertCoin()
	{
		cout<<"Coin already present";
	}

	virtual void ejectCoin()
	{
		cout<<"Collect your coin";
		gumballObj->setState(gumballObj->getnoQuarterState());
	}
	virtual void turnCrank()
	{
		cout<<"Dispensing"<<endl;
		gumballObj->decerementGumBalls();
		if(gumballObj->hasGumBalls())
		{
			gumballObj->setState(gumballObj->getsoldOutState());
		}
		else
		{
			gumballObj->setState(gumballObj->getsoldOutState());
		}
	}

private:
	GumBallMachine* gumballObj;
};

class SoldOut: public GumBallState {
public:
	SoldOut(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~SoldOut(){}

	virtual void insertCoin()
	{
		cout<<"No use"<<endl;
	}
	virtual void ejectCoin() {  }
	virtual void turnCrank() {  }

private:
	GumBallMachine* gumballObj;
};

class GumBallMachine {
public:
	GumBallMachine(int numberOfGumBalls)
	{
		noQuarterState = new NoQuarter(this);
		hasQuarterState = new HasQuarter(this);
		soldOut = new SoldOut(this);

		state = noQuarterState;

		this->numberOfGumBalls = numberOfGumBalls;
	}
	~GumBallMachine() {}

	GumBallState* getnoQuarterState()
	{
		return noQuarterState;
	}

	GumBallState* getQuarterState()
	{
		return hasQuarterState;
	}

	GumBallState* getsoldOutState()
	{
		return soldOut;
	}

	void setState(GumBallState* state)
	{
		this->state = state;
	}
	bool hasGumBalls()
	{
		bool retval = false;
		if( numberOfGumBalls > 0 )
		{
			retval = true;
		}
		return retval;
	}

	void decerementGumBalls()
	{
		numberOfGumBalls--;
	}
private:
	GumBallState* noQuarterState;
	GumBallState* hasQuarterState;
	GumBallState* soldOut;

	GumBallState* state;

	int numberOfGumBalls;
};


#endif /* GUMBALLMACHINE_H_ */
