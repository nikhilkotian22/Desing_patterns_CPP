/*
 * GumBallMachine.h
 *
 *  Created on: Nov 8, 2014
 *      Author: Nikhil
 */

#ifndef GUMBALLMACHINE_H_
#define GUMBALLMACHINE_H_

#include "GumBallState.h"

class GumBallMachine;

class NoQuarter: public GumBallState {
public:
	NoQuarter(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~NoQuarter(){}

	virtual void insertCoin()
	{

	}
	virtual void ejectCoin() {  }
	virtual void turnCrank() {  }

private:
	GumBallMachine* gumballObj;
};

class HasQuarter: public GumBallState {
public:
	HasQuarter(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~HasQuarter(){}

	virtual void insertCoin()
	{

	}
	virtual void ejectCoin() {  }
	virtual void turnCrank() {  }

private:
	GumBallMachine* gumballObj;
};

class Dispense: public GumBallState {
public:
	Dispense(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~Dispense(){}

	virtual void insertCoin()
	{

	}
	virtual void ejectCoin() {  }
	virtual void turnCrank() {  }

private:
	GumBallMachine* gumballObj;
};

class Dispense: public GumBallState {
public:
	Dispense(GumBallMachine* gumball)
	{
		gumballObj = gumball;
	}
	~Dispense(){}

	virtual void insertCoin()
	{

	}
	virtual void ejectCoin() {  }
	virtual void turnCrank() {  }

private:
	GumBallMachine* gumballObj;
};

class GumBallMachine {
public:
	GumBallMachine()
	{
		noQuarterState = new NoQuarter(this);

		state = noQuarterState;
	}
	~GumBallMachine() {}

	GumBallState* getnoQuarterState()
	{
		return noQuarterState;
	}

	GumBallState* getQuarterState()
	{
		return hasQuarterState;
	}

	GumBallState* getdispenseState()
	{
		return dispense;
	}

	GumBallState* getsoldOutState()
	{
		return soldOut;
	}

	void setState(GumBallState* state)
	{
		this->state = state;
	}

private:
	GumBallState* noQuarterState;
	GumBallState* hasQuarterState;
	GumBallState* dispense;
	GumBallState* soldOut;

	GumBallState* state;
};


#endif /* GUMBALLMACHINE_H_ */
